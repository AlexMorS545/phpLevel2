<?php
class A {
  /**
   *  Метод публичный
   */
  public function foo() {
    static $x = 0; // Переменная $x static, а значит она создается для класса А.
    echo ++$x; // Префиксная форма инкремента, сначала увеличиваем на 1, а потом выводим.
  }
}
$a1 = new A(); // Создаем первый объект
$a2 = new A(); // Создаем второй объект
// Вызываем метод foo(), т.к переменная создана для класса, сначала увеличиваем переменную на единицу,
// а потом выводим. Каждый последующий раз при вызове метода foo() идет проверка и переменная $x уже
// созданна, увеличиваем на единицу и выводим
$a1->foo(); // 1
$a2->foo(); // 2
$a1->foo(); // 3
$a2->foo(); // 4


class A {
  public function foo() {
    static $x = 0; // Переменная $x static, а значит она создается для класса А.
    echo ++$x;
  }
}

/**
 * Class B наследует класса А, переменная $x static, а значит она создается для класса В.
 */
class B extends A {
}
$a1 = new A(); // Создаем первый объект
$b1 = new B(); // Создаем второй объект
$a1->foo(); // Создаем переменную $x для класса А, перед выводом увеличиваем ее на единицу получаем 1
$b1->foo(); // Создаем переменную $x для класса В, перед выводом увеличиваем ее на единицу получаем 1
// Для каждого класса создается своя переменная $x.
$a1->foo(); // получаем 2
$b1->foo(); // получаем 2


class A {
  public function foo() {
    static $x = 0;
    echo ++$x;
  }
}

class B extends A {
}
// При создании объктов, если нет конструктора __construct() с параметрами, скобки можно не указывать.
// При выводе получаем такие же результаты, что и в примере выше.
$a1 = new A;
$b1 = new B;
$a1->foo(); // получаем 1
$b1->foo(); // получаем 1
$a1->foo(); // получаем 2
$b1->foo(); // получаем 2
